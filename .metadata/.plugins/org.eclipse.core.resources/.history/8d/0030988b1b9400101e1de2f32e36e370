package dao;

import model.Transaction;
import java.sql.*;
import java.util.*;

public class TransactionDAO {

    public List<Transaction> getFilteredTransactions(String accountNumber, String ifscCode, String status, String dateFrom, String dateTo) {
        List<Transaction> list = new ArrayList<>();
        StringBuilder sql = new StringBuilder("SELECT * FROM transactions WHERE 1=1");

        if(accountNumber != null && !accountNumber.isEmpty()) sql.append(" AND account_number = ?");
        if(ifscCode != null && !ifscCode.isEmpty()) sql.append(" AND ifsc_code = ?");
        if(status != null && !status.isEmpty()) sql.append(" AND status = ?");
        if(dateFrom != null && !dateFrom.isEmpty()) sql.append(" AND transaction_date >= ?");
        if(dateTo != null && !dateTo.isEmpty()) sql.append(" AND transaction_date <= ?");

        try (Connection conn = DBUtil.getConnection();
             PreparedStatement ps = conn.prepareStatement(sql.toString())) {

            int index = 1;
            if(accountNumber != null && !accountNumber.isEmpty()) ps.setString(index++, accountNumber);
            if(ifscCode != null && !ifscCode.isEmpty()) ps.setString(index++, ifscCode);
            if(status != null && !status.isEmpty()) ps.setString(index++, status);
            if(dateFrom != null && !dateFrom.isEmpty()) ps.setDate(index++, java.sql.Date.valueOf(dateFrom));
            if(dateTo != null && !dateTo.isEmpty()) ps.setDate(index++, java.sql.Date.valueOf(dateTo));

            ResultSet rs = ps.executeQuery();
            while(rs.next()) {
                Transaction t = new Transaction();
                t.setTransactionId(rs.getInt("transaction_id"));
                t.setAccountNumber(rs.getString("account_number"));
                t.setIfscCode(rs.getString("ifsc_code"));
                t.setBeneficiaryName(rs.getString("beneficiary_name"));
                t.setSenderName(rs.getString("sender_name"));
                t.setTransactionDate(rs.getDate("transaction_date"));
                t.setAmount(rs.getDouble("amount"));
                t.setCurrency(rs.getString("currency"));
                t.setMode(rs.getString("mode"));
                t.setStatus(rs.getString("status"));
                t.setReferenceNumber(rs.getString("reference_number"));
                t.setBranch(rs.getString("branch"));
                t.setDescription(rs.getString("description"));
                t.setRemarks(rs.getString("remarks"));
                list.add(t);
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return list;
    }
}
