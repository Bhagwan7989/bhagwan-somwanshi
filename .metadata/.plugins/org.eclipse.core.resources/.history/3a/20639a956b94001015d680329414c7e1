package dao;

import model.Transaction;
import dao.DBConnection;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class TransactionDAO {

    public List<Transaction> getFilteredTransactions(String startDate, String endDate,
                                                     String status, String minAmount, String maxAmount,
                                                     String accountNumber, String ifscCode,
                                                     Integer page, Integer pageSize) {
        List<Transaction> transactions = new ArrayList<>();
        StringBuilder sql = new StringBuilder("SELECT * FROM transactions WHERE transaction_date BETWEEN ? AND ?");
        if (status != null && !status.isEmpty()) sql.append(" AND status = ?");
        if (minAmount != null && !minAmount.isEmpty()) sql.append(" AND amount >= ?");
        if (maxAmount != null && !maxAmount.isEmpty()) sql.append(" AND amount <= ?");
        if (accountNumber != null && !accountNumber.isEmpty()) sql.append(" AND account_number LIKE ?");
        if (ifscCode != null && !ifscCode.isEmpty()) sql.append(" AND ifsc_code LIKE ?");
        sql.append(" ORDER BY transaction_date DESC");
        if (page != null && pageSize != null) sql.append(" LIMIT ? OFFSET ?");

        try (Connection conn = DBConnection.getConnection();
             PreparedStatement ps = conn.prepareStatement(sql.toString())) {

            int index = 1;
            ps.setDate(index++, Date.valueOf(startDate));
            ps.setDate(index++, Date.valueOf(endDate));
            if (status != null && !status.isEmpty()) ps.setString(index++, status);
            if (minAmount != null && !minAmount.isEmpty()) ps.setDouble(index++, Double.parseDouble(minAmount));
            if (maxAmount != null && !maxAmount.isEmpty()) ps.setDouble(index++, Double.parseDouble(maxAmount));
            if (accountNumber != null && !accountNumber.isEmpty()) ps.setString(index++, "%" + accountNumber + "%");
            if (ifscCode != null && !ifscCode.isEmpty()) ps.setString(index++, "%" + ifscCode + "%");
            if (page != null && pageSize != null) {
                ps.setInt(index++, pageSize);
                ps.setInt(index++, (page - 1) * pageSize);
            }

            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                Transaction t = new Transaction();
                t.setTransactionId(rs.getInt("transaction_id"));
                t.setUtrNumber(rs.getString("utr_number"));
                t.setAccountNumber(rs.getString("account_number"));
                t.setIfscCode(rs.getString("ifsc_code"));
                t.setBeneficiaryName(rs.getString("beneficiary_name"));
                t.setSenderName(rs.getString("sender_name"));
                t.setTransactionDate(rs.getDate("transaction_date"));
                t.setAmount(rs.getBigDecimal("amount"));
                t.setCurrency(rs.getString("currency"));
                t.setMode(rs.getString("mode"));
                t.setStatus(rs.getString("status"));
                t.setReferenceNumber(rs.getString("reference_number"));
                t.setBranch(rs.getString("branch"));
                t.setDescription(rs.getString("description"));
                t.setRemarks(rs.getString("remarks"));
                transactions.add(t);
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }

        return transactions;
    }
}
