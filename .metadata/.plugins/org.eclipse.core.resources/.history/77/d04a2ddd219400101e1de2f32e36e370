package dao;

import model.Transaction;
import util.DBConnection;

import java.sql.*;
import java.util.*;
import java.math.BigDecimal;

public class TransactionDAO {

    // Return count of matching records (used to compute total pages)
    public int getFilteredCount(String startDate, String endDate,
                                String status, String minAmount, String maxAmount,
                                String accountNumber, String ifscCode) {

        StringBuilder sql = new StringBuilder("SELECT COUNT(*) FROM transactions WHERE transaction_date BETWEEN ? AND ?");
        List<Object> params = new ArrayList<>();

        params.add(java.sql.Date.valueOf(startDate));
        params.add(java.sql.Date.valueOf(endDate));

        if (status != null && !status.trim().isEmpty()) {
            sql.append(" AND UPPER(status) = ?");
            params.add(status.trim().toUpperCase());
        }
        if (minAmount != null && !minAmount.trim().isEmpty()) {
            sql.append(" AND amount >= ?");
            params.add(new BigDecimal(minAmount.trim()));
        }
        if (maxAmount != null && !maxAmount.trim().isEmpty()) {
            sql.append(" AND amount <= ?");
            params.add(new BigDecimal(maxAmount.trim()));
        }
        if (accountNumber != null && !accountNumber.trim().isEmpty()) {
            sql.append(" AND account_number = ?");
            params.add(accountNumber.trim());
        }
        if (ifscCode != null && !ifscCode.trim().isEmpty()) {
            sql.append(" AND ifsc_code = ?");
            params.add(ifscCode.trim());
        }

        try (Connection conn = DBConnection.getConnection();
             PreparedStatement ps = conn.prepareStatement(sql.toString())) {

            for (int i = 0; i < params.size(); i++) ps.setObject(i + 1, params.get(i));
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) return rs.getInt(1);
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return 0;
    }

    // Paged fetch
    public List<Transaction> getFilteredTransactions(String startDate, String endDate,
                                                     String status, String minAmount, String maxAmount,
                                                     String accountNumber, String ifscCode,
                                                     int page, int pageSize) {

        List<Transaction> list = new ArrayList<>();
        StringBuilder sql = new StringBuilder("SELECT * FROM transactions WHERE transaction_date BETWEEN ? AND ?");
        List<Object> params = new ArrayList<>();

        params.add(java.sql.Date.valueOf(startDate));
        params.add(java.sql.Date.valueOf(endDate));

        if (status != null && !status.trim().isEmpty()) {
            sql.append(" AND UPPER(status) = ?");
            params.add(status.trim().toUpperCase());
        }
        if (minAmount != null && !minAmount.trim().isEmpty()) {
            sql.append(" AND amount >= ?");
            params.add(new BigDecimal(minAmount.trim()));
        }
        if (maxAmount != null && !maxAmount.trim().isEmpty()) {
            sql.append(" AND amount <= ?");
            params.add(new BigDecimal(maxAmount.trim()));
        }
        if (accountNumber != null && !accountNumber.trim().isEmpty()) {
            sql.append(" AND account_number = ?");
            params.add(accountNumber.trim());
        }
        if (ifscCode != null && !ifscCode.trim().isEmpty()) {
            sql.append(" AND ifsc_code = ?");
            params.add(ifscCode.trim());
        }

        sql.append(" ORDER BY transaction_date DESC, transaction_id DESC LIMIT ? OFFSET ?");

        try (Connection conn = DBConnection.getConnection();
             PreparedStatement ps = conn.prepareStatement(sql.toString())) {

            int idx = 1;
            for (Object p : params) {
                ps.setObject(idx++, p);
            }
            ps.setInt(idx++, pageSize);
            ps.setInt(idx, (page - 1) * pageSize);

            try (ResultSet rs = ps.executeQuery()) {
                while (rs.next()) {
                    Transaction t = mapRow(rs);
                    list.add(t);
                }
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return list;
    }

    // Fetch all matching (no pagination) â€” used by export
    public List<Transaction> getFilteredTransactions(String startDate, String endDate,
                                                     String status, String minAmount, String maxAmount,
                                                     String accountNumber, String ifscCode) {

        List<Transaction> list = new ArrayList<>();
        StringBuilder sql = new StringBuilder("SELECT * FROM transactions WHERE transaction_date BETWEEN ? AND ?");
        List<Object> params = new ArrayList<>();

        params.add(java.sql.Date.valueOf(startDate));
        params.add(java.sql.Date.valueOf(endDate));

        if (status != null && !status.trim().isEmpty()) {
            sql.append(" AND UPPER(status) = ?");
            params.add(status.trim().toUpperCase());
        }
        if (minAmount != null && !minAmount.trim().isEmpty()) {
            sql.append(" AND amount >= ?");
            params.add(new BigDecimal(minAmount.trim()));
        }
        if (maxAmount != null && !maxAmount.trim().isEmpty()) {
            sql.append(" AND amount <= ?");
            params.add(new BigDecimal(maxAmount.trim()));
        }
        if (accountNumber != null && !accountNumber.trim().isEmpty()) {
            sql.append(" AND account_number = ?");
            params.add(accountNumber.trim());
        }
        if (ifscCode != null && !ifscCode.trim().isEmpty()) {
            sql.append(" AND ifsc_code = ?");
            params.add(ifscCode.trim());
        }

        sql.append(" ORDER BY transaction_date DESC, transaction_id DESC");

        try (Connection conn = DBConnection.getConnection();
             PreparedStatement ps = conn.prepareStatement(sql.toString())) {

            for (int i = 0; i < params.size(); i++) ps.setObject(i + 1, params.get(i));
            try (ResultSet rs = ps.executeQuery()) {
                while (rs.next()) {
                    Transaction t = mapRow(rs);
                    list.add(t);
                }
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return list;
    }

    private Transaction mapRow(ResultSet rs) throws SQLException {
        Transaction t = new Transaction();
        t.setTransactionId(rs.getInt("transaction_id"));
        t.setUtrNumber(rs.getString("utr_no"));
        t.setAccountNumber(rs.getString("account_number"));
        t.setIfscCode(rs.getString("ifsc_code"));
        t.setBeneficiaryName(rs.getString("beneficiary_name"));
        t.setSenderName(rs.getString("sender_name"));
        Date d = rs.getDate("transaction_date");
        if (d != null) t.setTransactionDate(new java.util.Date(d.getTime()));
        t.setAmount(rs.getBigDecimal("amount"));
        t.setCurrency(rs.getString("currency"));
        t.setMode(rs.getString("mode"));
        t.setStatus(rs.getString("status"));
        t.setReferenceNumber(rs.getString("reference_number"));
        t.setBranch(rs.getString("branch"));
        t.setDescription(rs.getString("description"));
        t.setRemarks(rs.getString("remarks"));
        return t;
    }
}
