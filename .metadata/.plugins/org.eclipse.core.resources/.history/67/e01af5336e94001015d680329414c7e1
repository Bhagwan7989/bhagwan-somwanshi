package dao;

import model.Transaction;
import util.DBConnection;

import java.sql.*;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class TransactionDAO {

    public List<Transaction> getTransactions(Date fromDate, Date toDate, Double minAmt, Double maxAmt) {
        List<Transaction> list = new ArrayList<>();
        Connection conn = null;
        PreparedStatement ps = null;
        ResultSet rs = null;

        try {
            conn = DBConnection.getConnection();

            StringBuilder sql = new StringBuilder("SELECT * FROM transactions WHERE 1=1");

            if (fromDate != null) sql.append(" AND transaction_date >= ?");
            if (toDate != null)   sql.append(" AND transaction_date <= ?");
            if (minAmt != null)   sql.append(" AND amount >= ?");
            if (maxAmt != null)   sql.append(" AND amount <= ?");

            sql.append(" ORDER BY transaction_date DESC");

            ps = conn.prepareStatement(sql.toString());

            int idx = 1;
            if (fromDate != null) ps.setDate(idx++, new java.sql.Date(fromDate.getTime()));
            if (toDate != null)   ps.setDate(idx++, new java.sql.Date(toDate.getTime()));
            if (minAmt != null)   ps.setDouble(idx++, minAmt);
            if (maxAmt != null)   ps.setDouble(idx++, maxAmt);

            rs = ps.executeQuery();

            while (rs.next()) {
                Transaction t = new Transaction();
                t.setTransactionId(rs.getInt("transaction_id"));
                t.setAccountNumber(rs.getString("account_number"));
                t.setIfscCode(rs.getString("ifsc_code"));
                t.setBeneficiaryName(rs.getString("beneficiary_name"));
                t.setSenderName(rs.getString("sender_name"));
                t.setTransactionDate(rs.getDate("transaction_date"));
                t.setAmount(rs.getDouble("amount"));
                t.setCurrency(rs.getString("currency"));
                t.setMode(rs.getString("mode"));
                t.setStatus(rs.getString("status"));
                t.setReferenceNumber(rs.getString("reference_number"));
                t.setUtrNumber(rs.getString("utr_number"));
                t.setBranch(rs.getString("branch"));
                t.setDescription(rs.getString("description"));
                t.setRemarks(rs.getString("remarks"));

                list.add(t);
            }

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try { if (rs != null) rs.close(); } catch (Exception ignored) {}
            try { if (ps != null) ps.close(); } catch (Exception ignored) {}
            try { if (conn != null) conn.close(); } catch (Exception ignored) {}
        }
        return list;
    }
}
